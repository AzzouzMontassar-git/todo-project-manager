{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.API_URL + '/api/auth';\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData);\n  }\n  saveToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n  logout() {\n    localStorage.removeItem('authToken');\n  }\n  isLoggedIn() {\n    return this.getToken() !== null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n// Intercepteur pour ajouter le token JWT aux requêtes\nexport class JwtInterceptor {\n  intercept(req, next) {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + token)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["environment","AuthService","constructor","http","apiUrl","API_URL","login","credentials","post","register","userData","saveToken","token","localStorage","setItem","getToken","getItem","logout","removeItem","isLoggedIn","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","JwtInterceptor","intercept","req","next","cloned","clone","headers","set","handle"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = environment.API_URL + '/api/auth';\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, userData);\n  }\n\n  saveToken(token: string): void {\n    localStorage.setItem('authToken', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('authToken');\n  }\n\n  logout(): void {\n    localStorage.removeItem('authToken');\n  }\n\n  isLoggedIn(): boolean {\n    return this.getToken() !== null;\n  }\n}\n\n// Intercepteur pour ajouter le token JWT aux requêtes\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('authToken');\n    \n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + token)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACK,OAAO,GAAG,WAAW;EAEV;EAExCC,KAAKA,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAEG,WAAW,CAAC;EAC5D;EAEAE,QAAQA,CAACC,QAAa;IACpB,OAAO,IAAI,CAACP,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,WAAW,EAAEM,QAAQ,CAAC;EAC5D;EAEAC,SAASA,CAACC,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;EAC1C;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC;EAC1C;EAEAC,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACJ,QAAQ,EAAE,KAAK,IAAI;EACjC;;;uBA3BWd,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtB,WAAW;MAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;AAgCpB;AAEA,OAAM,MAAOC,cAAc;EACzBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMlB,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC;IAE/C,IAAIJ,KAAK,EAAE;MACT,MAAMmB,MAAM,GAAGF,GAAG,CAACG,KAAK,CAAC;QACvBC,OAAO,EAAEJ,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGtB,KAAK;OAC5D,CAAC;MACF,OAAOkB,IAAI,CAACK,MAAM,CAACJ,MAAM,CAAC;KAC3B,MAAM;MACL,OAAOD,IAAI,CAACK,MAAM,CAACN,GAAG,CAAC;;EAE3B;;;uBAZWF,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAH,OAAA,EAAdG,cAAc,CAAAF;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}