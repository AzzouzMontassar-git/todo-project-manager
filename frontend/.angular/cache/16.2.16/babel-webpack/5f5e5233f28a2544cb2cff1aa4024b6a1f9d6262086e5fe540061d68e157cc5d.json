{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/dashboard-client.service\";\nimport * as i2 from \"../../../header-client/header-client.component\";\nexport class DashboardClientComponent {\n  constructor(dashboardClientService) {\n    this.dashboardClientService = dashboardClientService;\n    this.currentUser = null; // utilisateur connecté\n    this.projects = [];\n    this.users = [];\n    this.loadingProjects = true;\n    this.loadingUsers = true;\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    // Récupérer l'utilisateur connecté depuis le localStorage\n    const userData = localStorage.getItem('currentUser');\n    if (userData) {\n      this.currentUser = JSON.parse(userData);\n    }\n    // Vérifier que currentUser et email existent\n    if (!this.currentUser?.email) {\n      console.error('Utilisateur non connecté ou email manquant.');\n      this.errorMessage = \"Vous n'êtes pas connecté ou l'email est manquant.\";\n      this.loadingProjects = false;\n      this.loadingUsers = false;\n      return;\n    }\n    // Charger les projets assignés à l'utilisateur\n    this.dashboardClientService.getProjectsByUserEmail(this.currentUser.email).subscribe({\n      next: projects => {\n        this.projects = projects;\n        this.loadingProjects = false;\n      },\n      error: err => {\n        console.error('Erreur lors du chargement des projets :', err);\n        this.errorMessage = \"Impossible de charger les projets.\";\n        this.loadingProjects = false;\n      }\n    });\n    // Charger tous les utilisateurs\n    this.dashboardClientService.getAllUsers().subscribe({\n      next: users => {\n        this.users = users;\n        this.loadingUsers = false;\n      },\n      error: err => {\n        console.error('Erreur lors du chargement des utilisateurs :', err);\n        this.errorMessage = \"Impossible de charger les utilisateurs.\";\n        this.loadingUsers = false;\n      }\n    });\n  }\n  addTask(project, title) {\n    if (!title.trim()) return;\n    if (!project.id) {\n      console.error('ID du projet manquant pour ajouter une tâche.');\n      return;\n    }\n    const newTask = {\n      title,\n      done: false\n    };\n    this.dashboardClientService.addTaskToProject(project.id, newTask).subscribe({\n      next: savedTask => {\n        if (!project.tasks) project.tasks = [];\n        project.tasks.push(savedTask);\n      },\n      error: err => console.error('Erreur ajout tâche :', err)\n    });\n  }\n  toggleTask(task) {\n    if (!task.id) {\n      console.error('ID de la tâche manquant pour toggle.');\n      return;\n    }\n    this.dashboardClientService.toggleTaskStatus(task.id).subscribe({\n      next: updatedTask => {\n        task.done = updatedTask.done;\n      },\n      error: err => console.error('Erreur toggle tâche :', err)\n    });\n  }\n  getUserName(userId) {\n    const user = this.users.find(u => u.id === userId);\n    return user ? user.name : 'Utilisateur inconnu';\n  }\n  static {\n    this.ɵfac = function DashboardClientComponent_Factory(t) {\n      return new (t || DashboardClientComponent)(i0.ɵɵdirectiveInject(i1.DashboardClientService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardClientComponent,\n      selectors: [[\"app-dashboard-client\"]],\n      decls: 3,\n      vars: 0,\n      consts: [[1, \"dashboard\"]],\n      template: function DashboardClientComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-header-client\");\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵtext(2, \" Bonjour, Utilisateur\\nVous n'\\u00EAtes pas connect\\u00E9 ou l'email est manquant.\\n\\u00A9 2025 ToDo Project Manager. All Rights Reserved. \\uD83C\\uDF10\\n\\uD83D\\uDC26\\n\\uD83D\\uDCD8\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      dependencies: [i2.HeaderClientComponent],\n      styles: [\".dashboard[_ngcontent-%COMP%] {\\n  max-width: 800px;\\n  margin: 20px auto;\\n  padding: 20px;\\n  background: #f4f6f8;\\n  border-radius: 10px;\\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\\n  font-family: Arial, sans-serif;\\n}\\n\\nh2[_ngcontent-%COMP%] {\\n  text-align: center;\\n  color: #333;\\n  margin-bottom: 30px;\\n}\\n\\n.projects[_ngcontent-%COMP%] {\\n  margin-bottom: 30px;\\n  padding: 15px;\\n  background: white;\\n  border-radius: 8px;\\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\\n}\\n\\n.projects[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin-bottom: 5px;\\n  color: #555;\\n}\\n\\n.projects[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 5px 0;\\n  color: #666;\\n}\\n\\n.add-task[_ngcontent-%COMP%] {\\n  display: flex;\\n  margin-bottom: 10px;\\n}\\n\\n.add-task[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  flex: 1;\\n  padding: 6px;\\n  border-radius: 5px;\\n  border: 1px solid #ccc;\\n  margin-right: 10px;\\n}\\n\\n.add-task[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  padding: 6px 12px;\\n  border: none;\\n  background-color: #007bff;\\n  color: white;\\n  border-radius: 5px;\\n  cursor: pointer;\\n}\\n\\n.add-task[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n  background-color: #0056b3;\\n}\\n\\nul[_ngcontent-%COMP%] {\\n  list-style: none;\\n  padding-left: 0;\\n}\\n\\nli[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: 5px;\\n}\\n\\nli[_ngcontent-%COMP%]   input[type=\\\"checkbox\\\"][_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n}\\n\\n.completed[_ngcontent-%COMP%] {\\n  text-decoration: line-through;\\n  color: gray;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC1jbGllbnQvZGFzaGJvYXJkLWNsaWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixxQ0FBcUM7RUFDckMsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsc0NBQXNDO0FBQ3hDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGFBQWE7RUFDYixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsT0FBTztFQUNQLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSw2QkFBNkI7RUFDN0IsV0FBVztBQUNiIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZCB7XHJcbiAgbWF4LXdpZHRoOiA4MDBweDtcclxuICBtYXJnaW46IDIwcHggYXV0bztcclxuICBwYWRkaW5nOiAyMHB4O1xyXG4gIGJhY2tncm91bmQ6ICNmNGY2Zjg7XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLDAsMCwwLjEpO1xyXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcclxufVxyXG5cclxuaDIge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogIzMzMztcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG59XHJcblxyXG4ucHJvamVjdHMge1xyXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgcGFkZGluZzogMTVweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwwLDAsMC4wNSk7XHJcbn1cclxuXHJcbi5wcm9qZWN0cyBoMyB7XHJcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG4gIGNvbG9yOiAjNTU1O1xyXG59XHJcblxyXG4ucHJvamVjdHMgcCB7XHJcbiAgbWFyZ2luOiA1cHggMDtcclxuICBjb2xvcjogIzY2NjtcclxufVxyXG5cclxuLmFkZC10YXNrIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5hZGQtdGFzayBpbnB1dCB7XHJcbiAgZmxleDogMTtcclxuICBwYWRkaW5nOiA2cHg7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4uYWRkLXRhc2sgYnV0dG9uIHtcclxuICBwYWRkaW5nOiA2cHggMTJweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLmFkZC10YXNrIGJ1dHRvbjpob3ZlciB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMztcclxufVxyXG5cclxudWwge1xyXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgcGFkZGluZy1sZWZ0OiAwO1xyXG59XHJcblxyXG5saSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG5cclxubGkgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcclxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbn1cclxuXHJcbi5jb21wbGV0ZWQge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xyXG4gIGNvbG9yOiBncmF5O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["DashboardClientComponent","constructor","dashboardClientService","currentUser","projects","users","loadingProjects","loadingUsers","errorMessage","ngOnInit","userData","localStorage","getItem","JSON","parse","email","console","error","getProjectsByUserEmail","subscribe","next","err","getAllUsers","addTask","project","title","trim","id","newTask","done","addTaskToProject","savedTask","tasks","push","toggleTask","task","toggleTaskStatus","updatedTask","getUserName","userId","user","find","u","name","i0","ɵɵdirectiveInject","i1","DashboardClientService","selectors","decls","vars","consts","template","DashboardClientComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard-client\\dashboard-client.component.ts","C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard-client\\dashboard-client.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Project, Task, User, DashboardClientService } from '../../../services/dashboard-client.service';\n\n@Component({\n  selector: 'app-dashboard-client',\n  templateUrl: './dashboard-client.component.html',\n  styleUrls: ['./dashboard-client.component.css']\n})\nexport class DashboardClientComponent implements OnInit {\n  currentUser: User | null = null; // utilisateur connecté\n  projects: Project[] = [];\n  users: User[] = [];\n  loadingProjects: boolean = true;\n  loadingUsers: boolean = true;\n  errorMessage: string = '';\n\n  constructor(private dashboardClientService: DashboardClientService) {}\n\n ngOnInit(): void {\n  // Récupérer l'utilisateur connecté depuis le localStorage\n  const userData = localStorage.getItem('currentUser');\n  if (userData) {\n    this.currentUser = JSON.parse(userData);\n  }\n\n  // Vérifier que currentUser et email existent\n  if (!this.currentUser?.email) {\n    console.error('Utilisateur non connecté ou email manquant.');\n    this.errorMessage = \"Vous n'êtes pas connecté ou l'email est manquant.\";\n    this.loadingProjects = false;\n    this.loadingUsers = false;\n    return;\n  }\n\n  // Charger les projets assignés à l'utilisateur\n  this.dashboardClientService.getProjectsByUserEmail(this.currentUser.email)\n    .subscribe({\n      next: (projects) => {\n        this.projects = projects;\n        this.loadingProjects = false;\n      },\n      error: (err) => {\n        console.error('Erreur lors du chargement des projets :', err);\n        this.errorMessage = \"Impossible de charger les projets.\";\n        this.loadingProjects = false;\n      }\n    });\n\n  // Charger tous les utilisateurs\n  this.dashboardClientService.getAllUsers()\n    .subscribe({\n      next: (users) => {\n        this.users = users;\n        this.loadingUsers = false;\n      },\n      error: (err) => {\n        console.error('Erreur lors du chargement des utilisateurs :', err);\n        this.errorMessage = \"Impossible de charger les utilisateurs.\";\n        this.loadingUsers = false;\n      }\n    });\n}\n\n\n  addTask(project: Project, title: string) {\n    if (!title.trim()) return;\n    if (!project.id) {\n      console.error('ID du projet manquant pour ajouter une tâche.');\n      return;\n    }\n\n    const newTask: Task = { title, done: false };\n    this.dashboardClientService.addTaskToProject(project.id, newTask)\n      .subscribe({\n        next: (savedTask: Task) => {\n          if (!project.tasks) project.tasks = [];\n          project.tasks.push(savedTask);\n        },\n        error: (err) => console.error('Erreur ajout tâche :', err)\n      });\n  }\n\n  toggleTask(task: Task) {\n    if (!task.id) {\n      console.error('ID de la tâche manquant pour toggle.');\n      return;\n    }\n\n    this.dashboardClientService.toggleTaskStatus(task.id)\n      .subscribe({\n        next: (updatedTask: Task) => {\n          task.done = updatedTask.done;\n        },\n        error: (err) => console.error('Erreur toggle tâche :', err)\n      });\n  }\n\n  getUserName(userId: number): string {\n    const user = this.users.find(u => u.id === userId);\n    return user ? user.name : 'Utilisateur inconnu';\n  }\n}\n","<app-header-client></app-header-client>\n<div class=\"dashboard\">\n Bonjour, Utilisateur\nVous n'êtes pas connecté ou l'email est manquant.\n© 2025 ToDo Project Manager. All Rights Reserved.\n\n🌐\n🐦\n📘"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}