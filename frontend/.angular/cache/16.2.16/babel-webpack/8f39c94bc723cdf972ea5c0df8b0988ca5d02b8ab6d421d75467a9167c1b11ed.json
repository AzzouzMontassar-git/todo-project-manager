{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(dashboardService) {\n    this.dashboardService = dashboardService;\n    this.currentUser = {\n      id: 1,\n      name: 'Admin',\n      role: 'admin'\n    };\n    this.users = [];\n    this.filteredUsers = [];\n    this.projects = [];\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n    this.newProjectNameError = false;\n    this.newProjectDescriptionError = false;\n    this.searchTerm$ = new Subject();\n  }\n  ngOnInit() {\n    this.loadUsers();\n    this.loadProjects();\n    this.searchTerm$.pipe(debounceTime(300), distinctUntilChanged()).subscribe(term => this.filterUsers(term));\n  }\n  loadUsers() {\n    this.dashboardService.getAllUsers().subscribe(users => {\n      this.users = users.filter(u => u.role !== 'admin');\n      this.filteredUsers = [...this.users];\n    });\n  }\n  loadProjects() {\n    // Admin voit tous les projets\n    if (this.currentUser.role === 'admin') {\n      this.dashboardService.getAllUsers().subscribe(users => {\n        users.filter(u => u.role !== 'admin').forEach(user => {\n          this.dashboardService.getProjectsByUser(user.name).subscribe(projects => {\n            this.projects.push(...projects);\n          });\n        });\n      });\n    } else {\n      this.dashboardService.getProjectsByUser(this.currentUser.name).subscribe(projects => {\n        this.projects = projects;\n      });\n    }\n  }\n  isFormValid() {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n  addProject() {\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n    const project = {\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],\n      tasks: []\n    };\n    this.assignedUserIds.forEach(userId => {\n      const user = this.users.find(u => u.id === userId);\n      if (user) {\n        this.dashboardService.createProject(user.name, project).subscribe(savedProject => {\n          this.projects.push(savedProject);\n        });\n      }\n    });\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n  }\n  addTask(project, taskTitle) {\n    if (!taskTitle.trim()) return;\n    project.tasks.push({\n      title: taskTitle.trim(),\n      done: false\n    });\n  }\n  toggleTask(task) {\n    task.done = !task.done;\n  }\n  removeTask(project, task) {\n    project.tasks = project.tasks.filter(t => t !== task);\n  }\n  removeProject(project) {\n    if (this.currentUser.role !== 'admin' || !project.id) return;\n    this.dashboardService.deleteProject(project.id).subscribe(() => {\n      this.projects = this.projects.filter(p => p !== project);\n    });\n  }\n  getAssignedUserNames(project) {\n    return project.assignedTo.map(id => this.users.find(u => u.id === id)?.name).filter(name => !!name).join(', ');\n  }\n  onSearchUser(term) {\n    this.searchTerm$.next(term);\n  }\n  filterUsers(term) {\n    if (!term) this.filteredUsers = [...this.users];else this.filteredUsers = this.users.filter(u => u.name.toLowerCase().includes(term.toLowerCase()));\n  }\n  get visibleProjects() {\n    if (this.currentUser.role === 'admin') return this.projects;\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id));\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","Subject","debounceTime","distinctUntilChanged","DashboardComponent","constructor","dashboardService","currentUser","id","name","role","users","filteredUsers","projects","newProjectName","newProjectDescription","assignedUserIds","newProjectNameError","newProjectDescriptionError","searchTerm$","ngOnInit","loadUsers","loadProjects","pipe","subscribe","term","filterUsers","getAllUsers","filter","u","forEach","user","getProjectsByUser","push","isFormValid","trim","addProject","project","description","assignedTo","tasks","userId","find","createProject","savedProject","addTask","taskTitle","title","done","toggleTask","task","removeTask","t","removeProject","deleteProject","p","getAssignedUserNames","map","join","onSearchUser","next","toLowerCase","includes","visibleProjects","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DashboardService, User, Project, Task } from '../../../services/dashboard.service';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  currentUser: User = { id: 1, name: 'Admin', role: 'admin' };\n\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  projects: Project[] = [];\n\n  newProjectName = '';\n  newProjectDescription = '';\n  assignedUserIds: number[] = [];\n  newProjectNameError = false;\n  newProjectDescriptionError = false;\n\n  searchTerm$ = new Subject<string>();\n\n  constructor(private dashboardService: DashboardService) {}\n\n  ngOnInit(): void {\n    this.loadUsers();\n    this.loadProjects();\n\n    this.searchTerm$.pipe(debounceTime(300), distinctUntilChanged())\n      .subscribe(term => this.filterUsers(term));\n  }\n\n  loadUsers() {\n    this.dashboardService.getAllUsers().subscribe(users => {\n      this.users = users.filter(u => u.role !== 'admin');\n      this.filteredUsers = [...this.users];\n    });\n  }\n\n  loadProjects() {\n    // Admin voit tous les projets\n    if (this.currentUser.role === 'admin') {\n      this.dashboardService.getAllUsers().subscribe(users => {\n        users.filter(u => u.role !== 'admin').forEach(user => {\n          this.dashboardService.getProjectsByUser(user.name).subscribe(projects => {\n            this.projects.push(...projects);\n          });\n        });\n      });\n    } else {\n      this.dashboardService.getProjectsByUser(this.currentUser.name).subscribe(projects => {\n        this.projects = projects;\n      });\n    }\n  }\n\n  isFormValid(): boolean {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n\n  addProject() {\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n\n    const project: Project = {\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],\n      tasks: []\n    };\n\n    this.assignedUserIds.forEach(userId => {\n      const user = this.users.find(u => u.id === userId);\n      if (user) {\n        this.dashboardService.createProject(user.name, project).subscribe(savedProject => {\n          this.projects.push(savedProject);\n        });\n      }\n    });\n\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n  }\n\n  addTask(project: Project, taskTitle: string) {\n    if (!taskTitle.trim()) return;\n    project.tasks.push({ title: taskTitle.trim(), done: false });\n  }\n\n  toggleTask(task: Task) {\n    task.done = !task.done;\n  }\n\n  removeTask(project: Project, task: Task) {\n    project.tasks = project.tasks.filter(t => t !== task);\n  }\n\n  removeProject(project: Project) {\n    if (this.currentUser.role !== 'admin' || !project.id) return;\n\n    this.dashboardService.deleteProject(project.id).subscribe(() => {\n      this.projects = this.projects.filter(p => p !== project);\n    });\n  }\n\n  getAssignedUserNames(project: Project): string {\n    return project.assignedTo\n      .map(id => this.users.find(u => u.id === id)?.name)\n      .filter(name => !!name)\n      .join(', ');\n  }\n\n  onSearchUser(term: string) {\n    this.searchTerm$.next(term);\n  }\n\n  filterUsers(term: string) {\n    if (!term) this.filteredUsers = [...this.users];\n    else this.filteredUsers = this.users.filter(u => u.name.toLowerCase().includes(term.toLowerCase()));\n  }\n\n  get visibleProjects(): Project[] {\n    if (this.currentUser.role === 'admin') return this.projects;\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}