{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.errorMessage = '';\n  }\n  login() {\n    this.errorMessage = '';\n    if (!this.email || !this.password) {\n      this.errorMessage = 'Veuillez remplir tous les champs';\n      return;\n    }\n    this.authService.login({\n      email: this.email,\n      password: this.password\n    }).subscribe({\n      next: res => {\n        // ✅ utilise saveAuthData(token, user) car c’est ce que ton service expose\n        this.authService.saveAuthData(res.token, res.user);\n        this.router.navigate(['/dashboard']); // Redirection après connexion\n      },\n\n      error: err => {\n        console.error(err);\n        this.errorMessage = err.error?.message || 'Email ou mot de passe incorrect';\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","authService","router","email","password","errorMessage","login","subscribe","next","res","saveAuthData","token","user","navigate","error","err","console","message","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  email: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  login() {\n    this.errorMessage = '';\n\n    if (!this.email || !this.password) {\n      this.errorMessage = 'Veuillez remplir tous les champs';\n      return;\n    }\n\n    this.authService.login({ email: this.email, password: this.password }).subscribe({\n      next: (res: any) => {\n        // ✅ utilise saveAuthData(token, user) car c’est ce que ton service expose\n        this.authService.saveAuthData(res.token, res.user); \n        this.router.navigate(['/dashboard']);  // Redirection après connexion\n      },\n      error: (err) => {\n        console.error(err);\n        this.errorMessage = err.error?.message || 'Email ou mot de passe incorrect';\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,YAAY,GAAW,EAAE;EAE8C;EAEvEC,KAAKA,CAAA;IACH,IAAI,CAACD,YAAY,GAAG,EAAE;IAEtB,IAAI,CAAC,IAAI,CAACF,KAAK,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MACjC,IAAI,CAACC,YAAY,GAAG,kCAAkC;MACtD;;IAGF,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAAEH,KAAK,EAAE,IAAI,CAACA,KAAK;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE,CAAC,CAACG,SAAS,CAAC;MAC/EC,IAAI,EAAGC,GAAQ,IAAI;QACjB;QACA,IAAI,CAACR,WAAW,CAACS,YAAY,CAACD,GAAG,CAACE,KAAK,EAAEF,GAAG,CAACG,IAAI,CAAC;QAClD,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAE;MACzC,CAAC;;MACDC,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;QAClB,IAAI,CAACV,YAAY,GAAGU,GAAG,CAACD,KAAK,EAAEG,OAAO,IAAI,iCAAiC;MAC7E;KACD,CAAC;EACJ;CACD;AA3BYlB,cAAc,GAAAmB,UAAA,EAL1BpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWtB,cAAc,CA2B1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}