{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardClientComponent = class DashboardClientComponent {\n  constructor() {\n    this.currentUser = {\n      id: 1,\n      name: 'Hazem Kammoun',\n      role: 'client'\n    };\n    this.users = [{\n      id: 1,\n      name: 'Hazem Kammoun',\n      role: 'client'\n    }, {\n      id: 2,\n      name: 'Alice Dupont',\n      role: 'client'\n    }, {\n      id: 3,\n      name: 'Admin User',\n      role: 'admin'\n    }];\n    this.projects = [{\n      id: 1,\n      name: 'Projet Alpha',\n      description: 'Description du projet Alpha',\n      assignedTo: [1, 2],\n      tasks: [{\n        id: 1,\n        title: 'Tâche 1',\n        done: false\n      }, {\n        id: 2,\n        title: 'Tâche 2',\n        done: true\n      }]\n    }, {\n      id: 2,\n      name: 'Projet Beta',\n      description: 'Description du projet Beta',\n      assignedTo: [1],\n      tasks: [{\n        id: 3,\n        title: 'Tâche 3',\n        done: false\n      }]\n    }];\n  }\n  addTask(project, title) {\n    if (!title.trim()) return;\n    const newTask = {\n      id: Date.now(),\n      title,\n      done: false\n    };\n    project.tasks.push(newTask);\n  }\n  toggleTask(task) {\n    task.done = !task.done;\n  }\n  getUserName(userId) {\n    const user = this.users.find(u => u.id === userId);\n    return user ? user.name : 'Utilisateur inconnu';\n  }\n};\nDashboardClientComponent = __decorate([Component({\n  selector: 'app-dashboard-client',\n  templateUrl: './dashboard-client.component.html',\n  styleUrls: ['./dashboard-client.component.css']\n})], DashboardClientComponent);","map":{"version":3,"names":["Component","DashboardClientComponent","constructor","currentUser","id","name","role","users","projects","description","assignedTo","tasks","title","done","addTask","project","trim","newTask","Date","now","push","toggleTask","task","getUserName","userId","user","find","u","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard-client\\dashboard-client.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Project, Task, User } from '../dashboard.model';\n\n@Component({\n  selector: 'app-dashboard-client',\n  templateUrl: './dashboard-client.component.html',\n  styleUrls: ['./dashboard-client.component.css']\n})\nexport class DashboardClientComponent {\n  currentUser: User = { id: 1, name: 'Hazem Kammoun', role: 'client' };\n\n  users: User[] = [\n    { id: 1, name: 'Hazem Kammoun', role: 'client' },\n    { id: 2, name: 'Alice Dupont', role: 'client' },\n    { id: 3, name: 'Admin User', role: 'admin' }\n  ];\n\n  projects: Project[] = [\n    {\n      id: 1,\n      name: 'Projet Alpha',\n      description: 'Description du projet Alpha',\n      assignedTo: [1, 2],\n      tasks: [\n        { id: 1, title: 'Tâche 1', done: false },\n        { id: 2, title: 'Tâche 2', done: true }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Projet Beta',\n      description: 'Description du projet Beta',\n      assignedTo: [1],\n      tasks: [\n        { id: 3, title: 'Tâche 3', done: false }\n      ]\n    }\n  ];\n\n  addTask(project: Project, title: string) {\n    if (!title.trim()) return;\n    const newTask: Task = { id: Date.now(), title, done: false };\n    project.tasks.push(newTask);\n  }\n\n  toggleTask(task: Task) {\n    task.done = !task.done;\n  }\n\n  getUserName(userId: number): string {\n    const user = this.users.find(u => u.id === userId);\n    return user ? user.name : 'Utilisateur inconnu';\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAA9BC,YAAA;IACL,KAAAC,WAAW,GAAS;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,IAAI,EAAE;IAAQ,CAAE;IAEpE,KAAAC,KAAK,GAAW,CACd;MAAEH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAChD;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,cAAc;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAC/C;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAO,CAAE,CAC7C;IAED,KAAAE,QAAQ,GAAc,CACpB;MACEJ,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,cAAc;MACpBI,WAAW,EAAE,6BAA6B;MAC1CC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAClBC,KAAK,EAAE,CACL;QAAEP,EAAE,EAAE,CAAC;QAAEQ,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAK,CAAE,EACxC;QAAET,EAAE,EAAE,CAAC;QAAEQ,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAI,CAAE;KAE1C,EACD;MACET,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,aAAa;MACnBI,WAAW,EAAE,4BAA4B;MACzCC,UAAU,EAAE,CAAC,CAAC,CAAC;MACfC,KAAK,EAAE,CACL;QAAEP,EAAE,EAAE,CAAC;QAAEQ,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAK,CAAE;KAE3C,CACF;EAgBH;EAdEC,OAAOA,CAACC,OAAgB,EAAEH,KAAa;IACrC,IAAI,CAACA,KAAK,CAACI,IAAI,EAAE,EAAE;IACnB,MAAMC,OAAO,GAAS;MAAEb,EAAE,EAAEc,IAAI,CAACC,GAAG,EAAE;MAAEP,KAAK;MAAEC,IAAI,EAAE;IAAK,CAAE;IAC5DE,OAAO,CAACJ,KAAK,CAACS,IAAI,CAACH,OAAO,CAAC;EAC7B;EAEAI,UAAUA,CAACC,IAAU;IACnBA,IAAI,CAACT,IAAI,GAAG,CAACS,IAAI,CAACT,IAAI;EACxB;EAEAU,WAAWA,CAACC,MAAc;IACxB,MAAMC,IAAI,GAAG,IAAI,CAAClB,KAAK,CAACmB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKoB,MAAM,CAAC;IAClD,OAAOC,IAAI,GAAGA,IAAI,CAACpB,IAAI,GAAG,qBAAqB;EACjD;CACD;AA7CYJ,wBAAwB,GAAA2B,UAAA,EALpC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,C,EACW9B,wBAAwB,CA6CpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}