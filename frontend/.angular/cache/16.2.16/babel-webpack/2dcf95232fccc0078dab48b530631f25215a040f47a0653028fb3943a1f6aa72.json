{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(dashboardService, cd) {\n    this.dashboardService = dashboardService;\n    this.cd = cd;\n    this.currentUser = {\n      id: 1,\n      nom: 'Admin',\n      prenom: 'Admin',\n      email: 'admin@example.com',\n      role: 'admin'\n    };\n    this.users = [];\n    this.filteredUsers = [];\n    this.projects = [];\n    this.newProjectTitle = ''; // Changé de newProjectName à newProjectTitle\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n    this.newProjectTitleError = false; // Changé\n    this.newProjectDescriptionError = false;\n    this.searchTerm$ = new Subject();\n  }\n  ngOnInit() {\n    this.loadUsers();\n    this.searchTerm$.pipe(debounceTime(300), distinctUntilChanged()).subscribe(term => this.filterUsers(term));\n  }\n  loadUsers() {\n    // Utilise dashboardService.getAllUsers() ou userService si séparé\n    // Assume dashboardService a getAllUsers, sinon ajoutez-le comme getAllProjects\n    this.dashboardService.getAllUsers().subscribe({\n      next: users => {\n        this.users = users.filter(u => u.role !== 'admin');\n        this.filteredUsers = [...this.users];\n        this.loadProjects();\n      },\n      error: error => {\n        console.error('Erreur lors du chargement des utilisateurs:', error);\n        this.loadProjects(); // Continue même si users fail\n      }\n    });\n  }\n\n  loadProjects() {\n    if (this.currentUser.role === 'admin') {\n      this.dashboardService.getAllProjects().subscribe({\n        next: projects => {\n          console.log('Projets chargés depuis getAllProjects:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors du chargement des projets:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      this.dashboardService.getProjectsByUser(this.currentUser.email).subscribe({\n        next: projects => {\n          console.log('Projets chargés pour l\\'utilisateur:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors du chargement des projets utilisateur:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  isFormValid() {\n    return !!this.newProjectTitle.trim() && !!this.newProjectDescription.trim() && this.assignedUserIds.length > 0;\n  }\n  validateForm() {\n    this.newProjectTitleError = !this.newProjectTitle.trim(); // Changé\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n  }\n  addProject() {\n    this.validateForm();\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n    const project = {\n      title: this.newProjectTitle.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],\n      tasks: []\n    };\n    // Utilise email du premier assigned comme owner (backend assigne tous)\n    const firstUserId = this.assignedUserIds[0];\n    const firstUser = this.users.find(u => u.id === firstUserId);\n    if (firstUser) {\n      this.dashboardService.createProject(firstUser.email, project).subscribe({\n        next: savedProject => {\n          console.log('Projet créé:', savedProject);\n          this.projects.push(savedProject);\n          this.cd.detectChanges();\n          this.resetForm();\n        },\n        error: error => {\n          console.error('Erreur création projet:', error);\n        }\n      });\n    }\n  }\n  resetForm() {\n    this.newProjectTitle = ''; // Changé\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n    this.newProjectTitleError = false; // Changé\n    this.newProjectDescriptionError = false;\n  }\n  // ... (reste des méthodes inchangées : addTask, toggleTask, removeTask, removeProject, getAssignedUserNames, onSearchUser, filterUsers)\n  addTask(project, taskTitle) {\n    if (!taskTitle || !taskTitle.trim()) {\n      console.log('Titre de tâche vide, abandon');\n      return;\n    }\n    const task = {\n      title: taskTitle.trim(),\n      done: false\n    };\n    project.tasks.push(task);\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: updatedProject => {\n          console.log('Tâche ajoutée:', task);\n          const index = this.projects.findIndex(p => p.id === project.id);\n          if (index !== -1) {\n            this.projects[index] = updatedProject;\n          }\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur ajout tâche:', error);\n          project.tasks = project.tasks.filter(t => t !== task);\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      console.error('Projet sans ID');\n    }\n  }\n  toggleTask(task, project) {\n    task.done = !task.done;\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche toggled:', task);\n        },\n        error: error => {\n          console.error('Erreur toggle:', error);\n          task.done = !task.done;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  removeTask(project, task) {\n    const originalTasks = [...project.tasks];\n    project.tasks = project.tasks.filter(t => t !== task);\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche supprimée');\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur suppression tâche:', error);\n          project.tasks = originalTasks;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  removeProject(project) {\n    if (!project.id) return;\n    this.dashboardService.deleteProject(project.id).subscribe({\n      next: () => {\n        this.projects = this.projects.filter(p => p !== project);\n        this.cd.detectChanges();\n        console.log('Projet supprimé');\n      },\n      error: error => {\n        console.error('Erreur suppression projet:', error);\n      }\n    });\n  }\n  getAssignedUserNames(project) {\n    return project.assignedTo.map(id => {\n      const user = this.users.find(u => u.id === id);\n      return user ? `${user.nom} ${user.prenom} (${user.email})` : `ID ${id}`;\n    }).filter(Boolean).join(', ');\n  }\n  onSearchUser(event) {\n    const term = event.target.value || '';\n    this.searchTerm$.next(term);\n  }\n  filterUsers(term) {\n    this.filteredUsers = term ? this.users.filter(u => u.nom.toLowerCase().includes(term.toLowerCase()) || u.prenom.toLowerCase().includes(term.toLowerCase()) || u.email.toLowerCase().includes(term.toLowerCase())) : [...this.users];\n  }\n  get visibleProjects() {\n    if (this.currentUser.role === 'admin') {\n      return this.projects;\n    }\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id)); // Filtre par assignedTo\n  }\n\n  get hasFormErrors() {\n    return this.newProjectTitleError || this.newProjectDescriptionError; // Changé\n  }\n  // Méthodes de tracking\n  trackByProjectId(index, project) {\n    return project.id || index;\n  }\n  trackByTaskTitle(index, task) {\n    return task.id || task.title || index;\n  }\n  // Gérer Entrée pour tâche\n  onTaskInputKeyPress(event, project, input) {\n    if (event.key === 'Enter' && input.value.trim()) {\n      this.addTask(project, input.value);\n      input.value = '';\n    }\n  }\n  // Debug\n  debugProjects() {\n    console.log('=== DEBUG PROJECTS ===');\n    console.log('Projets:', this.projects);\n    console.log('Visibles:', this.visibleProjects);\n    console.log('Users:', this.users);\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","Subject","debounceTime","distinctUntilChanged","DashboardComponent","constructor","dashboardService","cd","currentUser","id","nom","prenom","email","role","users","filteredUsers","projects","newProjectTitle","newProjectDescription","assignedUserIds","newProjectTitleError","newProjectDescriptionError","searchTerm$","ngOnInit","loadUsers","pipe","subscribe","term","filterUsers","getAllUsers","next","filter","u","loadProjects","error","console","getAllProjects","log","detectChanges","getProjectsByUser","isFormValid","trim","length","validateForm","addProject","project","title","description","assignedTo","tasks","firstUserId","firstUser","find","createProject","savedProject","push","resetForm","addTask","taskTitle","task","done","updateProject","updatedProject","index","findIndex","p","t","toggleTask","removeTask","originalTasks","removeProject","deleteProject","getAssignedUserNames","map","user","Boolean","join","onSearchUser","event","target","value","toLowerCase","includes","visibleProjects","hasFormErrors","trackByProjectId","trackByTaskTitle","onTaskInputKeyPress","input","key","debugProjects","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { DashboardService, Project, Task, User } from '../../../services/dashboard.service';  // Utilise User de dashboard si pas user.service séparé\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  currentUser: User = { id: 1, nom: 'Admin', prenom: 'Admin', email: 'admin@example.com', role: 'admin' };\n\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  projects: Project[] = [];\n\n  newProjectTitle = '';  // Changé de newProjectName à newProjectTitle\n  newProjectDescription = '';\n  assignedUserIds: number[] = [];\n  newProjectTitleError = false;  // Changé\n  newProjectDescriptionError = false;\n\n  searchTerm$ = new Subject<string>();\n\n  constructor(\n    private dashboardService: DashboardService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.loadUsers();\n\n    this.searchTerm$.pipe(\n      debounceTime(300),\n      distinctUntilChanged()\n    ).subscribe(term => this.filterUsers(term));\n  }\n\n  loadUsers() {\n    // Utilise dashboardService.getAllUsers() ou userService si séparé\n    // Assume dashboardService a getAllUsers, sinon ajoutez-le comme getAllProjects\n    this.dashboardService.getAllUsers().subscribe({  // Ajoutez cette méthode au service si besoin (http.get /users)\n      next: (users) => {\n        this.users = users.filter(u => u.role !== 'admin');\n        this.filteredUsers = [...this.users];\n        this.loadProjects();\n      },\n      error: (error) => {\n        console.error('Erreur lors du chargement des utilisateurs:', error);\n        this.loadProjects();  // Continue même si users fail\n      }\n    });\n  }\n\n  loadProjects() {\n    if (this.currentUser.role === 'admin') {\n      this.dashboardService.getAllProjects().subscribe({\n        next: (projects) => {\n          console.log('Projets chargés depuis getAllProjects:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors du chargement des projets:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      this.dashboardService.getProjectsByUser(this.currentUser.email).subscribe({\n        next: (projects) => {\n          console.log('Projets chargés pour l\\'utilisateur:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors du chargement des projets utilisateur:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  isFormValid(): boolean {\n    return !!this.newProjectTitle.trim() && \n           !!this.newProjectDescription.trim() && \n           this.assignedUserIds.length > 0;\n  }\n\n  validateForm() {\n    this.newProjectTitleError = !this.newProjectTitle.trim();  // Changé\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n  }\n\n  addProject() {\n    this.validateForm();\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n\n    const project: Project = {\n      title: this.newProjectTitle.trim(),  // Utilise title\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],  // Envoi des IDs pour backend\n      tasks: []\n    };\n\n    // Utilise email du premier assigned comme owner (backend assigne tous)\n    const firstUserId = this.assignedUserIds[0];\n    const firstUser = this.users.find(u => u.id === firstUserId);\n    \n    if (firstUser) {\n      this.dashboardService.createProject(firstUser.email, project).subscribe({\n        next: (savedProject) => {\n          console.log('Projet créé:', savedProject);\n          this.projects.push(savedProject);\n          this.cd.detectChanges();\n          this.resetForm();\n        },\n        error: (error) => {\n          console.error('Erreur création projet:', error);\n        }\n      });\n    }\n  }\n\n  resetForm() {\n    this.newProjectTitle = '';  // Changé\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n    this.newProjectTitleError = false;  // Changé\n    this.newProjectDescriptionError = false;\n  }\n\n  // ... (reste des méthodes inchangées : addTask, toggleTask, removeTask, removeProject, getAssignedUserNames, onSearchUser, filterUsers)\n\n  addTask(project: Project, taskTitle: string) {\n    if (!taskTitle || !taskTitle.trim()) {\n      console.log('Titre de tâche vide, abandon');\n      return;\n    }\n\n    const task: Task = { \n      title: taskTitle.trim(), \n      done: false \n    };\n\n    project.tasks.push(task);\n\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: (updatedProject) => {\n          console.log('Tâche ajoutée:', task);\n          const index = this.projects.findIndex(p => p.id === project.id);\n          if (index !== -1) {\n            this.projects[index] = updatedProject;\n          }\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur ajout tâche:', error);\n          project.tasks = project.tasks.filter(t => t !== task);\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      console.error('Projet sans ID');\n    }\n  }\n\n  toggleTask(task: Task, project: Project) {\n    task.done = !task.done;\n    \n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche toggled:', task);\n        },\n        error: (error) => {\n          console.error('Erreur toggle:', error);\n          task.done = !task.done;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  removeTask(project: Project, task: Task) {\n    const originalTasks = [...project.tasks];\n    project.tasks = project.tasks.filter(t => t !== task);\n    \n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche supprimée');\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur suppression tâche:', error);\n          project.tasks = originalTasks;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  removeProject(project: Project) {\n    if (!project.id) return;\n    \n    this.dashboardService.deleteProject(project.id).subscribe({\n      next: () => {\n        this.projects = this.projects.filter(p => p !== project);\n        this.cd.detectChanges();\n        console.log('Projet supprimé');\n      },\n      error: (error) => {\n        console.error('Erreur suppression projet:', error);\n      }\n    });\n  }\n\n  getAssignedUserNames(project: Project): string {\n    return project.assignedTo\n      .map(id => {\n        const user = this.users.find(u => u.id === id);\n        return user ? `${user.nom} ${user.prenom} (${user.email})` : `ID ${id}`;\n      })\n      .filter(Boolean)\n      .join(', ');\n  }\n\n  onSearchUser(event: Event) {\n    const term = (event.target as HTMLInputElement).value || '';\n    this.searchTerm$.next(term);\n  }\n\n  filterUsers(term: string) {\n    this.filteredUsers = term\n      ? this.users.filter(u => \n          u.nom.toLowerCase().includes(term.toLowerCase()) ||\n          u.prenom.toLowerCase().includes(term.toLowerCase()) ||\n          u.email.toLowerCase().includes(term.toLowerCase())\n        )\n      : [...this.users];\n  }\n\n  get visibleProjects(): Project[] {\n    if (this.currentUser.role === 'admin') {\n      return this.projects;\n    }\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id!));  // Filtre par assignedTo\n  }\n\n  get hasFormErrors(): boolean {\n    return this.newProjectTitleError || this.newProjectDescriptionError;  // Changé\n  }\n\n  // Méthodes de tracking\n  trackByProjectId(index: number, project: Project): any {\n    return project.id || index;\n  }\n\n  trackByTaskTitle(index: number, task: Task): any {\n    return task.id || task.title || index;\n  }\n\n  // Gérer Entrée pour tâche\n  onTaskInputKeyPress(event: KeyboardEvent, project: Project, input: HTMLInputElement) {\n    if (event.key === 'Enter' && input.value.trim()) {\n      this.addTask(project, input.value);\n      input.value = '';\n    }\n  }\n\n  // Debug\n  debugProjects() {\n    console.log('=== DEBUG PROJECTS ===');\n    console.log('Projets:', this.projects);\n    console.log('Visibles:', this.visibleProjects);\n    console.log('Users:', this.users);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}