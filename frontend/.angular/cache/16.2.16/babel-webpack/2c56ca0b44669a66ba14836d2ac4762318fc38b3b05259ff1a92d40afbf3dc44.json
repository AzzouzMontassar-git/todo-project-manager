{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor() {\n    this.projects = [];\n    this.nextProjectId = 1;\n    this.nextTaskId = 1;\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.newProjectNameError = false;\n    this.newProjectDescriptionError = false;\n  }\n  ngOnInit() {\n    // Initialisation si besoin (ex. chargement depuis un service)\n  }\n  isFormValid() {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n  addProject() {\n    if (!this.isFormValid()) return;\n    const project = {\n      id: this.nextProjectId++,\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      tasks: []\n    };\n    this.projects.push(project);\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n  }\n  addTask(project, taskTitle) {\n    if (!taskTitle.trim()) return;\n    const task = {\n      id: this.nextTaskId++,\n      title: taskTitle.trim(),\n      done: false\n    };\n    project.tasks.push(task);\n  }\n  toggleTask(task) {\n    task.done = !task.done;\n  }\n  removeTask(project, task) {\n    project.tasks = project.tasks.filter(t => t.id !== task.id);\n  }\n  removeProject(project) {\n    this.projects = this.projects.filter(p => p.id !== project.id);\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","projects","nextProjectId","nextTaskId","newProjectName","newProjectDescription","newProjectNameError","newProjectDescriptionError","ngOnInit","isFormValid","trim","addProject","project","id","name","description","tasks","push","addTask","taskTitle","task","title","done","toggleTask","removeTask","filter","t","removeProject","p","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\ninterface Project {\n  id: number;\n  name: string;\n  description: string;\n  tasks: Task[];\n}\n\ninterface Task {\n  id: number;\n  title: string;\n  done: boolean;\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n})\nexport class DashboardComponent implements OnInit {\n  projects: Project[] = [];\n  nextProjectId = 1;\n  nextTaskId = 1;\n\n  newProjectName = '';\n  newProjectDescription = '';\n  newProjectNameError = false;\n  newProjectDescriptionError = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    // Initialisation si besoin (ex. chargement depuis un service)\n  }\n\n  isFormValid(): boolean {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n\n  addProject() {\n    if (!this.isFormValid()) return;\n\n    const project: Project = {\n      id: this.nextProjectId++,\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      tasks: [],\n    };\n    this.projects.push(project);\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n  }\n\n  addTask(project: Project, taskTitle: string) {\n    if (!taskTitle.trim()) return;\n    const task: Task = { id: this.nextTaskId++, title: taskTitle.trim(), done: false };\n    project.tasks.push(task);\n  }\n\n  toggleTask(task: Task) {\n    task.done = !task.done;\n  }\n\n  removeTask(project: Project, task: Task) {\n    project.tasks = project.tasks.filter(t => t.id !== task.id);\n  }\n\n  removeProject(project: Project) {\n    this.projects = this.projects.filter(p => p.id !== project.id);\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAoB1C,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAU7BC,YAAA;IATA,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,UAAU,GAAG,CAAC;IAEd,KAAAC,cAAc,GAAG,EAAE;IACnB,KAAAC,qBAAqB,GAAG,EAAE;IAC1B,KAAAC,mBAAmB,GAAG,KAAK;IAC3B,KAAAC,0BAA0B,GAAG,KAAK;EAEnB;EAEfC,QAAQA,CAAA;IACN;EAAA;EAGFC,WAAWA,CAAA;IACT,IAAI,CAACH,mBAAmB,GAAG,CAAC,IAAI,CAACF,cAAc,CAACM,IAAI,EAAE;IACtD,IAAI,CAACH,0BAA0B,GAAG,CAAC,IAAI,CAACF,qBAAqB,CAACK,IAAI,EAAE;IACpE,OAAO,CAAC,IAAI,CAACJ,mBAAmB,IAAI,CAAC,IAAI,CAACC,0BAA0B;EACtE;EAEAI,UAAUA,CAAA;IACR,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE,EAAE;IAEzB,MAAMG,OAAO,GAAY;MACvBC,EAAE,EAAE,IAAI,CAACX,aAAa,EAAE;MACxBY,IAAI,EAAE,IAAI,CAACV,cAAc,CAACM,IAAI,EAAE;MAChCK,WAAW,EAAE,IAAI,CAACV,qBAAqB,CAACK,IAAI,EAAE;MAC9CM,KAAK,EAAE;KACR;IACD,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAACL,OAAO,CAAC;IAC3B,IAAI,CAACR,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,qBAAqB,GAAG,EAAE;EACjC;EAEAa,OAAOA,CAACN,OAAgB,EAAEO,SAAiB;IACzC,IAAI,CAACA,SAAS,CAACT,IAAI,EAAE,EAAE;IACvB,MAAMU,IAAI,GAAS;MAAEP,EAAE,EAAE,IAAI,CAACV,UAAU,EAAE;MAAEkB,KAAK,EAAEF,SAAS,CAACT,IAAI,EAAE;MAAEY,IAAI,EAAE;IAAK,CAAE;IAClFV,OAAO,CAACI,KAAK,CAACC,IAAI,CAACG,IAAI,CAAC;EAC1B;EAEAG,UAAUA,CAACH,IAAU;IACnBA,IAAI,CAACE,IAAI,GAAG,CAACF,IAAI,CAACE,IAAI;EACxB;EAEAE,UAAUA,CAACZ,OAAgB,EAAEQ,IAAU;IACrCR,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKO,IAAI,CAACP,EAAE,CAAC;EAC7D;EAEAc,aAAaA,CAACf,OAAgB;IAC5B,IAAI,CAACX,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACwB,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACf,EAAE,KAAKD,OAAO,CAACC,EAAE,CAAC;EAChE;CACD;AArDYd,kBAAkB,GAAA8B,UAAA,EAL9B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWjC,kBAAkB,CAqD9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}