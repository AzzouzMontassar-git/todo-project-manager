{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/users'; // URL backend\n  }\n  // Obtenir tous les utilisateurs\n  getAllUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  // Obtenir utilisateur par ID\n  getUserById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Obtenir utilisateur par email\n  getUserByEmail(email) {\n    return this.http.get(`${this.apiUrl}/email/${email}`);\n  }\n  // Créer un nouvel utilisateur (inscription)\n  createUser(user) {\n    return this.http.post(this.apiUrl / register, user);\n  }\n  // Mettre à jour un utilisateur\n  updateUser(id, user) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n  // Supprimer un utilisateur par ID\n  deleteUserById(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  // Supprimer un utilisateur par email\n  deleteUserByEmail(email) {\n    return this.http.delete(`${this.apiUrl}/email/${email}`);\n  }\n  // Mettre à jour le mot de passe\n  updatePassword(email, newPassword) {\n    return this.http.put(`${this.apiUrl}/update-password/${email}`, {\n      newPassword\n    });\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["UserService","constructor","http","apiUrl","getAllUsers","get","getUserById","id","getUserByEmail","email","createUser","user","post","register","updateUser","put","deleteUserById","delete","deleteUserByEmail","updatePassword","newPassword","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\services\\user.service.ts"],"sourcesContent":["// src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n// Modèle User\nexport interface User {\n  id?: number;\n  nom: string;\n  prenom: string;\n  email: string;\n  password?: string;\n  role?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private apiUrl = 'http://localhost:8080/api/users'; // URL backend\n\n  constructor(private http: HttpClient) { }\n\n  // Obtenir tous les utilisateurs\n  getAllUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n\n  // Obtenir utilisateur par ID\n  getUserById(id: number): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\n  }\n\n  // Obtenir utilisateur par email\n  getUserByEmail(email: string): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/email/${email}`);\n  }\n\n  // Créer un nouvel utilisateur (inscription)\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(this.apiUrl/register, user);\n  }\n\n  // Mettre à jour un utilisateur\n  updateUser(id: number, user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${id}`, user);\n  }\n\n  // Supprimer un utilisateur par ID\n  deleteUserById(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  // Supprimer un utilisateur par email\n  deleteUserByEmail(email: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/email/${email}`);\n  }\n\n  \n\n  // Mettre à jour le mot de passe\n  updatePassword(email: string, newPassword: string): Observable<void> {\n    return this.http.put<void>(`${this.apiUrl}/update-password/${email}`, { newPassword });\n  }\n}\n"],"mappings":";;AAkBA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC,CAAC,CAAC;EAEZ;EAExC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEA;EACAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EACpD;EAEA;EACAC,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,UAAUM,KAAK,EAAE,CAAC;EAC7D;EAEA;EACAC,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAO,IAAI,CAACT,MAAM,GAACU,QAAQ,EAAEF,IAAI,CAAC;EACzD;EAEA;EACAG,UAAUA,CAACP,EAAU,EAAEI,IAAU;IAC/B,OAAO,IAAI,CAACT,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACZ,MAAM,IAAII,EAAE,EAAE,EAAEI,IAAI,CAAC;EAC1D;EAEA;EACAK,cAAcA,CAACT,EAAU;IACvB,OAAO,IAAI,CAACL,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACd,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;EAEA;EACAW,iBAAiBA,CAACT,KAAa;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACd,MAAM,UAAUM,KAAK,EAAE,CAAC;EAChE;EAIA;EACAU,cAAcA,CAACV,KAAa,EAAEW,WAAmB;IAC/C,OAAO,IAAI,CAAClB,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACZ,MAAM,oBAAoBM,KAAK,EAAE,EAAE;MAAEW;IAAW,CAAE,CAAC;EACxF;;;uBA9CWpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}