{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(dashboardService, userService, cd) {\n    this.dashboardService = dashboardService;\n    this.userService = userService;\n    this.cd = cd;\n    this.currentUser = {\n      id: 1,\n      nom: 'Admin',\n      prenom: 'Admin',\n      email: 'admin@example.com',\n      role: 'admin'\n    };\n    this.users = [];\n    this.filteredUsers = [];\n    this.projects = [];\n    this.newProjectTitle = ''; // Changé de newProjectName à newProjectTitle\n    this.newProjectDescription = '';\n    this.assignedUserId = null; // Changé pour un seul utilisateur\n    this.newProjectTitleError = false;\n    this.newProjectDescriptionError = false;\n    this.searchTerm$ = new Subject();\n  }\n  ngOnInit() {\n    this.loadUsers();\n    this.searchTerm$.pipe(debounceTime(300), distinctUntilChanged()).subscribe(term => this.filterUsers(term));\n  }\n  loadUsers() {\n    this.userService.getAllUsers().subscribe({\n      next: users => {\n        this.users = users.filter(u => u.role !== 'admin');\n        this.filteredUsers = [...this.users];\n        this.loadProjects();\n      },\n      error: error => {\n        console.error('Erreur lors du chargement des utilisateurs:', error);\n      }\n    });\n  }\n  loadProjects() {\n    if (this.currentUser.role === 'admin') {\n      // Pour les admins, charger TOUS les projets\n      this.dashboardService.getAllProjects().subscribe({\n        next: projects => {\n          console.log('Projets chargés depuis getAllProjects:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors du chargement des projets:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      // Pour les utilisateurs normaux, charger seulement leurs projets\n      this.dashboardService.getProjectsByUser(this.currentUser.email).subscribe({\n        next: projects => {\n          console.log('Projets chargés pour l\\'utilisateur:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors du chargement des projets utilisateur:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  isFormValid() {\n    return !!this.newProjectTitle.trim() && !!this.newProjectDescription.trim() && this.assignedUserId !== null;\n  }\n  validateForm() {\n    this.newProjectTitleError = !this.newProjectTitle.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n  }\n  addProject() {\n    this.validateForm();\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n    const project = {\n      title: this.newProjectTitle.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: this.assignedUserId ? [this.assignedUserId] : [],\n      tasks: []\n    };\n    const user = this.users.find(u => u.id === this.assignedUserId);\n    if (user) {\n      this.dashboardService.createProject(user.email, project).subscribe({\n        next: savedProject => {\n          this.projects.push(savedProject);\n          this.cd.detectChanges();\n          this.resetForm();\n          console.log('Projet créé avec succès:', savedProject);\n        },\n        error: error => {\n          console.error('Erreur lors de la création du projet:', error);\n        }\n      });\n    }\n  }\n  resetForm() {\n    this.newProjectTitle = '';\n    this.newProjectDescription = '';\n    this.assignedUserId = null;\n    this.newProjectTitleError = false;\n    this.newProjectDescriptionError = false;\n  }\n  addTask(project, taskTitle) {\n    if (!taskTitle || !taskTitle.trim()) {\n      console.log('Titre de tâche vide, abandon');\n      return;\n    }\n    const task = {\n      title: taskTitle.trim(),\n      done: false\n    };\n    // Ajouter la tâche localement d'abord\n    if (!project.tasks) project.tasks = [];\n    project.tasks.push(task);\n    // Puis mettre à jour sur le serveur\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: updatedProject => {\n          console.log('Tâche ajoutée avec succès:', task);\n          // Optionnel: remplacer le projet local par la version serveur\n          const index = this.projects.findIndex(p => p.id === project.id);\n          if (index !== -1) {\n            this.projects[index] = updatedProject;\n          }\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors de l\\'ajout de la tâche:', error);\n          // Rollback en cas d'erreur\n          project.tasks = project.tasks.filter(t => t !== task);\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      console.error('Projet sans ID, impossible de sauvegarder la tâche');\n    }\n  }\n  toggleTask(task, project) {\n    task.done = !task.done;\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Statut de tâche mis à jour:', task);\n        },\n        error: error => {\n          console.error('Erreur lors de la mise à jour de la tâche:', error);\n          // Rollback\n          task.done = !task.done;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  removeTask(project, task) {\n    const originalTasks = [...project.tasks];\n    project.tasks = project.tasks.filter(t => t !== task);\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche supprimée avec succès');\n          this.cd.detectChanges();\n        },\n        error: error => {\n          console.error('Erreur lors de la suppression de la tâche:', error);\n          // Rollback\n          project.tasks = originalTasks;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n  removeProject(project) {\n    if (!project.id) return;\n    this.dashboardService.deleteProject(project.id).subscribe({\n      next: () => {\n        this.projects = this.projects.filter(p => p !== project);\n        this.cd.detectChanges();\n        console.log('Projet supprimé avec succès');\n      },\n      error: error => {\n        console.error('Erreur lors de la suppression du projet:', error);\n      }\n    });\n  }\n  getAssignedUserNames(project) {\n    if (!project.assignedTo || project.assignedTo.length === 0) return 'Non assigné';\n    return project.assignedTo.map(id => {\n      const user = this.users.find(u => u.id === id);\n      return user ? `${user.nom} ${user.prenom} (${user.email})` : '';\n    }).filter(Boolean).join(', ');\n  }\n  onSearchUser(event) {\n    const term = event.target.value || '';\n    this.searchTerm$.next(term);\n  }\n  filterUsers(term) {\n    this.filteredUsers = term ? this.users.filter(u => u.nom.toLowerCase().includes(term.toLowerCase()) || u.prenom.toLowerCase().includes(term.toLowerCase()) || u.email.toLowerCase().includes(term.toLowerCase())) : [...this.users];\n  }\n  get visibleProjects() {\n    if (this.currentUser.role === 'admin') {\n      return this.projects;\n    }\n    return this.projects.filter(p => p.assignedTo && p.assignedTo.includes(this.currentUser.id));\n  }\n  get hasFormErrors() {\n    return this.newProjectTitleError || this.newProjectDescriptionError;\n  }\n  // Méthodes de tracking pour optimiser le rendu\n  trackByProjectId(index, project) {\n    return project.id || index;\n  }\n  trackByTaskTitle(index, task) {\n    return task.title || index;\n  }\n  // Gérer l'ajout de tâche avec la touche Entrée\n  onTaskInputKeyPress(event, project, input) {\n    if (event.key === 'Enter' && input.value.trim()) {\n      this.addTask(project, input.value);\n      input.value = '';\n    }\n  }\n  // Méthode de débogage pour vérifier l'état\n  debugProjects() {\n    console.log('=== DEBUG PROJECTS ===');\n    console.log('Nombre total de projets:', this.projects.length);\n    console.log('Projets visibles:', this.visibleProjects.length);\n    console.log('Rôle utilisateur:', this.currentUser.role);\n    console.log('ID utilisateur:', this.currentUser.id);\n    console.log('Tous les projets:', this.projects);\n    console.log('Projets visibles détail:', this.visibleProjects);\n    this.projects.forEach((project, index) => {\n      console.log(`Projet ${index}:`, {\n        id: project.id,\n        title: project.title,\n        assignedTo: project.assignedTo,\n        tasks: project.tasks?.length || 0\n      });\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","Subject","debounceTime","distinctUntilChanged","DashboardComponent","constructor","dashboardService","userService","cd","currentUser","id","nom","prenom","email","role","users","filteredUsers","projects","newProjectTitle","newProjectDescription","assignedUserId","newProjectTitleError","newProjectDescriptionError","searchTerm$","ngOnInit","loadUsers","pipe","subscribe","term","filterUsers","getAllUsers","next","filter","u","loadProjects","error","console","getAllProjects","log","detectChanges","getProjectsByUser","isFormValid","trim","validateForm","addProject","project","title","description","assignedTo","tasks","user","find","createProject","savedProject","push","resetForm","addTask","taskTitle","task","done","updateProject","updatedProject","index","findIndex","p","t","toggleTask","removeTask","originalTasks","removeProject","deleteProject","getAssignedUserNames","length","map","Boolean","join","onSearchUser","event","target","value","toLowerCase","includes","visibleProjects","hasFormErrors","trackByProjectId","trackByTaskTitle","onTaskInputKeyPress","input","key","debugProjects","forEach","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { DashboardService, Project, Task } from '../../../services/dashboard.service';\nimport { UserService, User } from '../../../services/user.service';\nimport { Subject, forkJoin } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  currentUser: User = { id: 1, nom: 'Admin', prenom: 'Admin', email: 'admin@example.com', role: 'admin' };\n\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  projects: Project[] = [];\n\n  newProjectTitle = '';  // Changé de newProjectName à newProjectTitle\n  newProjectDescription = '';\n  assignedUserId: number | null = null;  // Changé pour un seul utilisateur\n  newProjectTitleError = false;\n  newProjectDescriptionError = false;\n\n  searchTerm$ = new Subject<string>();\n\n  constructor(\n    private dashboardService: DashboardService,\n    private userService: UserService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.loadUsers();\n\n    this.searchTerm$.pipe(\n      debounceTime(300),\n      distinctUntilChanged()\n    ).subscribe(term => this.filterUsers(term));\n  }\n\n  loadUsers() {\n    this.userService.getAllUsers().subscribe({\n      next: (users) => {\n        this.users = users.filter(u => u.role !== 'admin');\n        this.filteredUsers = [...this.users];\n        this.loadProjects();\n      },\n      error: (error) => {\n        console.error('Erreur lors du chargement des utilisateurs:', error);\n      }\n    });\n  }\n\n  loadProjects() {\n    if (this.currentUser.role === 'admin') {\n      // Pour les admins, charger TOUS les projets\n      this.dashboardService.getAllProjects().subscribe({\n        next: (projects) => {\n          console.log('Projets chargés depuis getAllProjects:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors du chargement des projets:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      // Pour les utilisateurs normaux, charger seulement leurs projets\n      this.dashboardService.getProjectsByUser(this.currentUser.email).subscribe({\n        next: (projects) => {\n          console.log('Projets chargés pour l\\'utilisateur:', projects);\n          this.projects = projects || [];\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors du chargement des projets utilisateur:', error);\n          this.projects = [];\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  isFormValid(): boolean {\n    return !!this.newProjectTitle.trim() && \n           !!this.newProjectDescription.trim() && \n           this.assignedUserId !== null;\n  }\n\n  validateForm() {\n    this.newProjectTitleError = !this.newProjectTitle.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n  }\n\n  addProject() {\n    this.validateForm();\n    if (this.currentUser.role !== 'admin' || !this.isFormValid()) return;\n\n    const project: Project = {\n      title: this.newProjectTitle.trim(),  // Changé de name à title\n      description: this.newProjectDescription.trim(),\n      assignedTo: this.assignedUserId ? [this.assignedUserId] : [],  // Adapté pour un seul utilisateur\n      tasks: []\n    };\n\n    const user = this.users.find(u => u.id === this.assignedUserId);\n    \n    if (user) {\n      this.dashboardService.createProject(user.email, project).subscribe({\n        next: (savedProject) => {\n          this.projects.push(savedProject);\n          this.cd.detectChanges();\n          this.resetForm();\n          console.log('Projet créé avec succès:', savedProject);\n        },\n        error: (error) => {\n          console.error('Erreur lors de la création du projet:', error);\n        }\n      });\n    }\n  }\n\n  resetForm() {\n    this.newProjectTitle = '';\n    this.newProjectDescription = '';\n    this.assignedUserId = null;\n    this.newProjectTitleError = false;\n    this.newProjectDescriptionError = false;\n  }\n\n  addTask(project: Project, taskTitle: string) {\n    if (!taskTitle || !taskTitle.trim()) {\n      console.log('Titre de tâche vide, abandon');\n      return;\n    }\n\n    const task: Task = { \n      title: taskTitle.trim(), \n      done: false \n    };\n\n    // Ajouter la tâche localement d'abord\n    if (!project.tasks) project.tasks = [];\n    project.tasks.push(task);\n\n    // Puis mettre à jour sur le serveur\n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: (updatedProject) => {\n          console.log('Tâche ajoutée avec succès:', task);\n          // Optionnel: remplacer le projet local par la version serveur\n          const index = this.projects.findIndex(p => p.id === project.id);\n          if (index !== -1) {\n            this.projects[index] = updatedProject;\n          }\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors de l\\'ajout de la tâche:', error);\n          // Rollback en cas d'erreur\n          project.tasks = project.tasks.filter(t => t !== task);\n          this.cd.detectChanges();\n        }\n      });\n    } else {\n      console.error('Projet sans ID, impossible de sauvegarder la tâche');\n    }\n  }\n\n  toggleTask(task: Task, project: Project) {\n    task.done = !task.done;\n    \n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Statut de tâche mis à jour:', task);\n        },\n        error: (error) => {\n          console.error('Erreur lors de la mise à jour de la tâche:', error);\n          // Rollback\n          task.done = !task.done;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  removeTask(project: Project, task: Task) {\n    const originalTasks = [...project.tasks];\n    project.tasks = project.tasks.filter(t => t !== task);\n    \n    if (project.id) {\n      this.dashboardService.updateProject(project.id, project).subscribe({\n        next: () => {\n          console.log('Tâche supprimée avec succès');\n          this.cd.detectChanges();\n        },\n        error: (error) => {\n          console.error('Erreur lors de la suppression de la tâche:', error);\n          // Rollback\n          project.tasks = originalTasks;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  removeProject(project: Project) {\n    if (!project.id) return;\n    \n    this.dashboardService.deleteProject(project.id).subscribe({\n      next: () => {\n        this.projects = this.projects.filter(p => p !== project);\n        this.cd.detectChanges();\n        console.log('Projet supprimé avec succès');\n      },\n      error: (error) => {\n        console.error('Erreur lors de la suppression du projet:', error);\n      }\n    });\n  }\n\n  getAssignedUserNames(project: Project): string {\n    if (!project.assignedTo || project.assignedTo.length === 0) return 'Non assigné';\n    \n    return project.assignedTo\n      .map(id => {\n        const user = this.users.find(u => u.id === id);\n        return user ? `${user.nom} ${user.prenom} (${user.email})` : '';\n      })\n      .filter(Boolean)\n      .join(', ');\n  }\n\n  onSearchUser(event: Event) {\n    const term = (event.target as HTMLInputElement).value || '';\n    this.searchTerm$.next(term);\n  }\n\n  filterUsers(term: string) {\n    this.filteredUsers = term\n      ? this.users.filter(u => \n          u.nom.toLowerCase().includes(term.toLowerCase()) ||\n          u.prenom.toLowerCase().includes(term.toLowerCase()) ||\n          u.email.toLowerCase().includes(term.toLowerCase())\n        )\n      : [...this.users];\n  }\n\n  get visibleProjects(): Project[] {\n    if (this.currentUser.role === 'admin') {\n      return this.projects;\n    }\n    return this.projects.filter(p => p.assignedTo && p.assignedTo.includes(this.currentUser.id!));\n  }\n\n  get hasFormErrors(): boolean {\n    return this.newProjectTitleError || this.newProjectDescriptionError;\n  }\n\n  // Méthodes de tracking pour optimiser le rendu\n  trackByProjectId(index: number, project: Project): any {\n    return project.id || index;\n  }\n\n  trackByTaskTitle(index: number, task: Task): any {\n    return task.title || index;\n  }\n\n  // Gérer l'ajout de tâche avec la touche Entrée\n  onTaskInputKeyPress(event: KeyboardEvent, project: Project, input: HTMLInputElement) {\n    if (event.key === 'Enter' && input.value.trim()) {\n      this.addTask(project, input.value);\n      input.value = '';\n    }\n  }\n\n  // Méthode de débogage pour vérifier l'état\n  debugProjects() {\n    console.log('=== DEBUG PROJECTS ===');\n    console.log('Nombre total de projets:', this.projects.length);\n    console.log('Projets visibles:', this.visibleProjects.length);\n    console.log('Rôle utilisateur:', this.currentUser.role);\n    console.log('ID utilisateur:', this.currentUser.id);\n    console.log('Tous les projets:', this.projects);\n    console.log('Projets visibles détail:', this.visibleProjects);\n    this.projects.forEach((project, index) => {\n      console.log(`Projet ${index}:`, {\n        id: project.id,\n        title: project.title,  // Changé de name à title\n        assignedTo: project.assignedTo,\n        tasks: project.tasks?.length || 0\n      });\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}