{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n    this.nom = '';\n    this.prenom = '';\n    this.email = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n  register() {\n    this.errorMessage = '';\n    this.successMessage = '';\n    // Validation basique\n    if (!this.nom || !this.prenom || !this.email || !this.password || !this.confirmPassword) {\n      this.errorMessage = 'Veuillez remplir tous les champs';\n      return;\n    }\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Les mots de passe ne correspondent pas';\n      return;\n    }\n    const newUser = {\n      nom: this.nom,\n      prenom: this.prenom,\n      email: this.email,\n      password: this.password,\n      role: 'eleve' // rôle par défaut\n    };\n\n    this.userService.createUser(newUser).subscribe({\n      next: user => {\n        this.successMessage = 'Compte créé avec succès !';\n        this.router.navigate(['/login']);\n      },\n      error: err => {\n        if (err.status === 400) {\n          this.errorMessage = 'Cette adresse e-mail est déjà utilisée.';\n        } else {\n          this.errorMessage = 'Erreur lors de la création du compte. Veuillez réessayer.';\n        }\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","RegisterComponent","constructor","userService","router","nom","prenom","email","password","confirmPassword","errorMessage","successMessage","register","newUser","role","createUser","subscribe","next","user","navigate","error","err","status","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\auth\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService, User } from '../../../services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  nom: string = '';\n  prenom: string = '';\n  email: string = '';\n  password: string = '';\n  confirmPassword: string = '';\n  errorMessage: string = '';\n  successMessage: string = '';\n\n  constructor(private userService: UserService, private router: Router) {}\n\n  register() {\n    this.errorMessage = '';\n    this.successMessage = '';\n\n    // Validation basique\n    if (!this.nom || !this.prenom || !this.email || !this.password || !this.confirmPassword) {\n      this.errorMessage = 'Veuillez remplir tous les champs';\n      return;\n    }\n\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Les mots de passe ne correspondent pas';\n      return;\n    }\n\n    const newUser: User = {\n      nom: this.nom,\n      prenom: this.prenom,\n      email: this.email,\n      password: this.password,\n      role: 'eleve' // rôle par défaut\n    };\n\n    this.userService.createUser(newUser).subscribe({\n      next: (user) => {\n        this.successMessage = 'Compte créé avec succès !';\n        this.router.navigate(['/login']);\n      },\n      error: (err) => {\n        if (err.status === 400) {\n          this.errorMessage = 'Cette adresse e-mail est déjà utilisée.';\n        } else {\n          this.errorMessage = 'Erreur lors de la création du compte. Veuillez réessayer.';\n        }\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAS5BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAR5D,KAAAC,GAAG,GAAW,EAAE;IAChB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,cAAc,GAAW,EAAE;EAE4C;EAEvEC,QAAQA,CAAA;IACN,IAAI,CAACF,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB;IACA,IAAI,CAAC,IAAI,CAACN,GAAG,IAAI,CAAC,IAAI,CAACC,MAAM,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,CAAC,IAAI,CAACC,QAAQ,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;MACvF,IAAI,CAACC,YAAY,GAAG,kCAAkC;MACtD;;IAGF,IAAI,IAAI,CAACF,QAAQ,KAAK,IAAI,CAACC,eAAe,EAAE;MAC1C,IAAI,CAACC,YAAY,GAAG,wCAAwC;MAC5D;;IAGF,MAAMG,OAAO,GAAS;MACpBR,GAAG,EAAE,IAAI,CAACA,GAAG;MACbC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBM,IAAI,EAAE,OAAO,CAAC;KACf;;IAED,IAAI,CAACX,WAAW,CAACY,UAAU,CAACF,OAAO,CAAC,CAACG,SAAS,CAAC;MAC7CC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACP,cAAc,GAAG,2BAA2B;QACjD,IAAI,CAACP,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACtB,IAAI,CAACZ,YAAY,GAAG,yCAAyC;SAC9D,MAAM;UACL,IAAI,CAACA,YAAY,GAAG,2DAA2D;;MAEnF;KACD,CAAC;EACJ;CACD;AAhDYT,iBAAiB,GAAAsB,UAAA,EAL7BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWzB,iBAAiB,CAgD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}