{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DashboardService {\n  constructor(http) {\n    this.http = http;\n    this.apiProjects = `${environment.API_URL}/projects`;\n    this.apiTasks = `${environment.API_URL}/tasks`;\n  }\n  // Méthodes pour les projets\n  getAllProjects() {\n    return this.http.get(this.apiProjects);\n  }\n  getProjectsByUser(email) {\n    return this.http.get(`${this.apiProjects}/user/${email}`);\n  }\n  createProject(email, project) {\n    return this.http.post(`${this.apiProjects}/user/${email}`, project);\n  }\n  updateProject(projectId, project) {\n    return this.http.put(`${this.apiProjects}/${projectId}`, project);\n  }\n  deleteProject(projectId) {\n    return this.http.delete(`${this.apiProjects}/${projectId}`);\n  }\n  // Méthodes pour les tâches\n  getProjectTasks(projectId) {\n    return this.http.get(`${this.apiProjects}/${projectId}/tasks`);\n  }\n  addTaskToProject(projectId, task) {\n    return this.http.post(`${this.apiProjects}/${projectId}/tasks`, task);\n  }\n  updateTask(taskId, task) {\n    return this.http.put(`${this.apiTasks}/${taskId}`, task);\n  }\n  deleteTask(taskId) {\n    return this.http.delete(`${this.apiTasks}/${taskId}`);\n  }\n  toggleTaskStatus(taskId) {\n    return this.http.patch(`${this.apiTasks}/${taskId}/toggle`, {});\n  }\n  static {\n    this.ɵfac = function DashboardService_Factory(t) {\n      return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardService,\n      factory: DashboardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","DashboardService","constructor","http","apiProjects","API_URL","apiTasks","getAllProjects","get","getProjectsByUser","email","createProject","project","post","updateProject","projectId","put","deleteProject","delete","getProjectTasks","addTaskToProject","task","updateTask","taskId","deleteTask","toggleTaskStatus","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\services\\dashboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment';\n\nexport interface Task {\n  id?: number;\n  title: string;\n  done: boolean;\n  projectId?: number; // Ajouté pour lier la tâche à un projet\n}\n\nexport interface Project {\n  id?: number;\n  title: string;\n  description: string;\n  assignedTo: number[]; // IDs des utilisateurs assignés\n  tasks: Task[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  private apiProjects = `${environment.API_URL}/projects`;\n  private apiTasks = `${environment.API_URL}/tasks`;\n\n  constructor(private http: HttpClient) {}\n\n  // Méthodes pour les projets\n  getAllProjects(): Observable<Project[]> {\n    return this.http.get<Project[]>(this.apiProjects);\n  }\n\n  getProjectsByUser(email: string): Observable<Project[]> {\n    return this.http.get<Project[]>(`${this.apiProjects}/user/${email}`);\n  }\n\n  createProject(email: string, project: Project): Observable<Project> {\n    return this.http.post<Project>(`${this.apiProjects}/user/${email}`, project);\n  }\n\n  updateProject(projectId: number, project: Project): Observable<Project> {\n    return this.http.put<Project>(`${this.apiProjects}/${projectId}`, project);\n  }\n\n  deleteProject(projectId: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiProjects}/${projectId}`);\n  }\n\n  // Méthodes pour les tâches\n  getProjectTasks(projectId: number): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.apiProjects}/${projectId}/tasks`);\n  }\n\n  addTaskToProject(projectId: number, task: Task): Observable<Task> {\n    return this.http.post<Task>(`${this.apiProjects}/${projectId}/tasks`, task);\n  }\n\n  updateTask(taskId: number, task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.apiTasks}/${taskId}`, task);\n  }\n\n  deleteTask(taskId: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiTasks}/${taskId}`);\n  }\n\n  toggleTaskStatus(taskId: number): Observable<Task> {\n    return this.http.patch<Task>(`${this.apiTasks}/${taskId}/toggle`, {});\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,6BAA6B;;;AAoBzD,OAAM,MAAOC,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,WAAW,GAAG,GAAGJ,WAAW,CAACK,OAAO,WAAW;IAC/C,KAAAC,QAAQ,GAAG,GAAGN,WAAW,CAACK,OAAO,QAAQ;EAEV;EAEvC;EACAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACJ,WAAW,CAAC;EACnD;EAEAK,iBAAiBA,CAACC,KAAa;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,WAAW,SAASM,KAAK,EAAE,CAAC;EACtE;EAEAC,aAAaA,CAACD,KAAa,EAAEE,OAAgB;IAC3C,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAU,GAAG,IAAI,CAACT,WAAW,SAASM,KAAK,EAAE,EAAEE,OAAO,CAAC;EAC9E;EAEAE,aAAaA,CAACC,SAAiB,EAAEH,OAAgB;IAC/C,OAAO,IAAI,CAACT,IAAI,CAACa,GAAG,CAAU,GAAG,IAAI,CAACZ,WAAW,IAAIW,SAAS,EAAE,EAAEH,OAAO,CAAC;EAC5E;EAEAK,aAAaA,CAACF,SAAiB;IAC7B,OAAO,IAAI,CAACZ,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACd,WAAW,IAAIW,SAAS,EAAE,CAAC;EACnE;EAEA;EACAI,eAAeA,CAACJ,SAAiB;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,WAAW,IAAIW,SAAS,QAAQ,CAAC;EACxE;EAEAK,gBAAgBA,CAACL,SAAiB,EAAEM,IAAU;IAC5C,OAAO,IAAI,CAAClB,IAAI,CAACU,IAAI,CAAO,GAAG,IAAI,CAACT,WAAW,IAAIW,SAAS,QAAQ,EAAEM,IAAI,CAAC;EAC7E;EAEAC,UAAUA,CAACC,MAAc,EAAEF,IAAU;IACnC,OAAO,IAAI,CAAClB,IAAI,CAACa,GAAG,CAAO,GAAG,IAAI,CAACV,QAAQ,IAAIiB,MAAM,EAAE,EAAEF,IAAI,CAAC;EAChE;EAEAG,UAAUA,CAACD,MAAc;IACvB,OAAO,IAAI,CAACpB,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACZ,QAAQ,IAAIiB,MAAM,EAAE,CAAC;EAC7D;EAEAE,gBAAgBA,CAACF,MAAc;IAC7B,OAAO,IAAI,CAACpB,IAAI,CAACuB,KAAK,CAAO,GAAG,IAAI,CAACpB,QAAQ,IAAIiB,MAAM,SAAS,EAAE,EAAE,CAAC;EACvE;;;uBA9CWtB,gBAAgB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAhB7B,gBAAgB;MAAA8B,OAAA,EAAhB9B,gBAAgB,CAAA+B,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}