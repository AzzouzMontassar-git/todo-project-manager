{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DashboardClientService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/projects';\n  }\n  getProjectsByUserEmail(email) {\n    return this.http.get(`${this.apiUrl}/user/${email}`);\n  }\n  addTaskToProject(projectId, task) {\n    return this.http.post(`${this.apiUrl}/${projectId}/tasks`, task);\n  }\n  toggleTaskStatus(taskId) {\n    const token = localStorage.getItem('authToken');\n    return this.http.patch(`http://localhost:8080/api/tasks/${taskId}/toggle`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n  getAllUsers() {\n    return this.http.get('http://localhost:8080/api/users');\n  }\n  static {\n    this.ɵfac = function DashboardClientService_Factory(t) {\n      return new (t || DashboardClientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardClientService,\n      factory: DashboardClientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["DashboardClientService","constructor","http","apiUrl","getProjectsByUserEmail","email","get","addTaskToProject","projectId","task","post","toggleTaskStatus","taskId","token","localStorage","getItem","patch","headers","Authorization","getAllUsers","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\services\\dashboard-client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Task {\n  id?: number;\n  title: string;\n  done: boolean;\n}\nexport interface Project {\n  id?: number;\n  name: string;\n  description: string;\n  assignedTo: number[];\n  tasks: Task[];\n}\nexport interface User {\n  id: number;\n  nom: string;\n  prenom: string;\n  email: string;\n  role: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardClientService {\n  private apiUrl = 'http://localhost:8080/api/projects';\n\n  constructor(private http: HttpClient) {}\n\n  getProjectsByUserEmail(email: string): Observable<Project[]> {\n    return this.http.get<Project[]>(`${this.apiUrl}/user/${email}`);\n  }\n\n  addTaskToProject(projectId: number, task: { title: string; done: boolean }): Observable<Task> {\n    return this.http.post<Task>(`${this.apiUrl}/${projectId}/tasks`, task);\n  }\n\n  toggleTaskStatus(taskId: number): Observable<Task> {\n  const token = localStorage.getItem('authToken');\n  return this.http.patch<Task>(`http://localhost:8080/api/tasks/${taskId}/toggle`, {}, {\n    headers: { Authorization: `Bearer ${token}` }\n  });\n}\n\n\n  getAllUsers(): Observable<User[]> {\n    return this.http.get<User[]>('http://localhost:8080/api/users');\n  }\n}\n"],"mappings":";;AA2BA,OAAM,MAAOA,sBAAsB;EAGjCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,oCAAoC;EAEd;EAEvCC,sBAAsBA,CAACC,KAAa;IAClC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,GAAG,IAAI,CAACH,MAAM,SAASE,KAAK,EAAE,CAAC;EACjE;EAEAE,gBAAgBA,CAACC,SAAiB,EAAEC,IAAsC;IACxE,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,GAAG,IAAI,CAACP,MAAM,IAAIK,SAAS,QAAQ,EAAEC,IAAI,CAAC;EACxE;EAEAE,gBAAgBA,CAACC,MAAc;IAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,OAAO,IAAI,CAACb,IAAI,CAACc,KAAK,CAAO,mCAAmCJ,MAAM,SAAS,EAAE,EAAE,EAAE;MACnFK,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUL,KAAK;MAAE;KAC5C,CAAC;EACJ;EAGEM,WAAWA,CAAA;IACT,OAAO,IAAI,CAACjB,IAAI,CAACI,GAAG,CAAS,iCAAiC,CAAC;EACjE;;;uBAvBWN,sBAAsB,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAtBvB,sBAAsB;MAAAwB,OAAA,EAAtBxB,sBAAsB,CAAAyB,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}