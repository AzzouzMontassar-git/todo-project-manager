{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor() {\n    // Simuler l'utilisateur connecté\n    this.currentUser = {\n      id: 1,\n      name: 'Admin',\n      role: 'admin'\n    };\n    // Liste des utilisateurs\n    this.users = [{\n      id: 1,\n      name: 'Admin',\n      role: 'admin'\n    }, {\n      id: 2,\n      name: 'Client1',\n      role: 'client'\n    }, {\n      id: 3,\n      name: 'Client2',\n      role: 'client'\n    }];\n    this.projects = [];\n    this.nextProjectId = 1;\n    this.nextTaskId = 1;\n    // Formulaire projet (admin)\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n    this.newProjectNameError = false;\n    this.newProjectDescriptionError = false;\n  }\n  ngOnInit() {\n    // Exemple de projets pour tester\n    this.projects = [{\n      id: 1,\n      name: 'Projet A',\n      description: 'Description A',\n      assignedTo: [2],\n      tasks: []\n    }, {\n      id: 2,\n      name: 'Projet B',\n      description: 'Description B',\n      assignedTo: [3],\n      tasks: []\n    }];\n    this.nextProjectId = 3;\n  }\n  // Validation formulaire\n  isFormValid() {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n  // Ajouter projet (admin)\n  addProject() {\n    if (this.currentUser.role !== 'admin') return;\n    if (!this.isFormValid()) return;\n    const project = {\n      id: this.nextProjectId++,\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],\n      tasks: []\n    };\n    this.projects.push(project);\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n  }\n  // Ajouter tâche à un projet\n  addTask(project, taskTitle) {\n    if (!taskTitle.trim()) return;\n    const task = {\n      id: this.nextTaskId++,\n      title: taskTitle.trim(),\n      done: false\n    };\n    project.tasks.push(task);\n  }\n  // Marquer tâche comme faite\n  toggleTask(task) {\n    task.done = !task.done;\n  }\n  // Supprimer tâche\n  removeTask(project, task) {\n    project.tasks = project.tasks.filter(t => t.id !== task.id);\n  }\n  // Supprimer projet (admin)\n  removeProject(project) {\n    if (this.currentUser.role !== 'admin') return;\n    this.projects = this.projects.filter(p => p.id !== project.id);\n  }\n  // Récupérer noms utilisateurs assignés à un projet\n  getAssignedUserNames(project) {\n    return project.assignedTo.map(id => this.users.find(u => u.id === id)?.name).filter(name => !!name).join(', ');\n  }\n  // Projets visibles selon le rôle\n  get visibleProjects() {\n    if (this.currentUser.role === 'admin') return this.projects;\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id));\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","currentUser","id","name","role","users","projects","nextProjectId","nextTaskId","newProjectName","newProjectDescription","assignedUserIds","newProjectNameError","newProjectDescriptionError","ngOnInit","description","assignedTo","tasks","isFormValid","trim","addProject","project","push","addTask","taskTitle","task","title","done","toggleTask","removeTask","filter","t","removeProject","p","getAssignedUserNames","map","find","u","join","visibleProjects","includes","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\monta\\OneDrive\\Documents\\Projects\\todo-project-manager\\src\\app\\features\\dashboard\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User, Project, Task } from '../dashboard.model';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n})\nexport class DashboardComponent implements OnInit {\n\n  // Simuler l'utilisateur connecté\n  currentUser: User = { id: 1, name: 'Admin', role: 'admin' };\n\n  // Liste des utilisateurs\n  users: User[] = [\n    { id: 1, name: 'Admin', role: 'admin' },\n    { id: 2, name: 'Client1', role: 'client' },\n    { id: 3, name: 'Client2', role: 'client' },\n  ];\n\n  projects: Project[] = [];\n  nextProjectId = 1;\n  nextTaskId = 1;\n\n  // Formulaire projet (admin)\n  newProjectName = '';\n  newProjectDescription = '';\n  assignedUserIds: number[] = [];\n  newProjectNameError = false;\n  newProjectDescriptionError = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    // Exemple de projets pour tester\n    this.projects = [\n      { id: 1, name: 'Projet A', description: 'Description A', assignedTo: [2], tasks: [] },\n      { id: 2, name: 'Projet B', description: 'Description B', assignedTo: [3], tasks: [] },\n    ];\n    this.nextProjectId = 3;\n  }\n\n  // Validation formulaire\n  isFormValid(): boolean {\n    this.newProjectNameError = !this.newProjectName.trim();\n    this.newProjectDescriptionError = !this.newProjectDescription.trim();\n    return !this.newProjectNameError && !this.newProjectDescriptionError;\n  }\n\n  // Ajouter projet (admin)\n  addProject() {\n    if (this.currentUser.role !== 'admin') return;\n    if (!this.isFormValid()) return;\n\n    const project: Project = {\n      id: this.nextProjectId++,\n      name: this.newProjectName.trim(),\n      description: this.newProjectDescription.trim(),\n      assignedTo: [...this.assignedUserIds],\n      tasks: [],\n    };\n    this.projects.push(project);\n\n    this.newProjectName = '';\n    this.newProjectDescription = '';\n    this.assignedUserIds = [];\n  }\n\n  // Ajouter tâche à un projet\n  addTask(project: Project, taskTitle: string) {\n    if (!taskTitle.trim()) return;\n    const task: Task = { id: this.nextTaskId++, title: taskTitle.trim(), done: false };\n    project.tasks.push(task);\n  }\n\n  // Marquer tâche comme faite\n  toggleTask(task: Task) {\n    task.done = !task.done;\n  }\n\n  // Supprimer tâche\n  removeTask(project: Project, task: Task) {\n    project.tasks = project.tasks.filter(t => t.id !== task.id);\n  }\n\n  // Supprimer projet (admin)\n  removeProject(project: Project) {\n    if (this.currentUser.role !== 'admin') return;\n    this.projects = this.projects.filter(p => p.id !== project.id);\n  }\n\n  // Récupérer noms utilisateurs assignés à un projet\n  getAssignedUserNames(project: Project): string {\n    return project.assignedTo\n      .map(id => this.users.find(u => u.id === id)?.name)\n      .filter(name => !!name)\n      .join(', ');\n  }\n\n  // Projets visibles selon le rôle\n  get visibleProjects(): Project[] {\n    if (this.currentUser.role === 'admin') return this.projects;\n    return this.projects.filter(p => p.assignedTo.includes(this.currentUser.id));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}